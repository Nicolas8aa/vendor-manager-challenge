import React, { useEffect, useState } from "react";
import { fetchFromClient } from "@/services/auth";
import { Pagination } from "@nextui-org/react";

// Generated by https://quicktype.io

interface Response {
  totalItems: number;
  results: Submission[];
  totalPages: number;
  currentPage: number;
}

interface Submission {
  id: number;
  price: number;
  paymentDate: string;
  Agreement: Agreement;
}

interface Agreement {
  id: number;
  terms: string;
  status: string;
  createdAt: string;
  updatedAt: string;
  SupplierId: number;
  BuyerId: number;
  Buyer: Buyer;
}

export interface Buyer {
  id: number;
  firstName: string;
  lastName: string;
  email: string;
}

import { PageTitle, Title } from "@/components/Text";
import BuyerCard from "@/components/Card/Buyer";
import DateRangePicker from "@/components/DateRangePicker";

const BestBuyers = () => {
  const [startDate, setStartDate] = useState<Date>(new Date());
  const [endDate, setEndDate] = useState<Date>(new Date());

  const [response, setResponse] = useState<Response>();
  const [page, setPage] = useState<number>(0);
  const [error, setError] = useState<string>("");

  const handleSubmit = async (
    page: string,
    { start, end }: { start: Date; end: Date }
  ) => {
    const query = new URLSearchParams({
      start: start.toISOString(),
      end: end.toISOString(),
      size: "3",
      page,
    });

    const response = await fetchFromClient(
      `/admin/best-buyers?${query.toString()}`,
      {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      }
    );

    if (response.status !== 200) {
      const error = await response.json();
      setError(error.message || "Unknown error");
      return;
    }

    const data = await response.json();
    setResponse(data);
  };

  useEffect(() => {
    if (page === 0) return;
    handleSubmit((page - 1).toString(), { start: startDate, end: endDate });
  }, [page]);

  return (
    <div>
      <PageTitle className="mb-2">Best buyers</PageTitle>

      <DateRangePicker
        onSubmit={(start, end) => {
          setStartDate(start);
          setEndDate(end);
          handleSubmit("0", { start, end });
        }}
        onClear={() => {
          setResponse(undefined);
        }}
      />

      <PageTitle className="mt-5 text-lg">Results</PageTitle>
      {error && <p className="text-red-500">{error}</p>}
      {response && response.results.length === 0 && (
        <p className="text-red-500">No results</p>
      )}
      {!error && response && response.results.length > 0 && (
        <div className="flex flex-col gap-5">
          <div className="inline-flex gap-4">
            {response.results.map((result) => {
              return (
                <BuyerCard
                  key={result.id}
                  buyer={result.Agreement.Buyer}
                  submission={result as any}
                />
              );
            })}
          </div>
          <Pagination
            onChange={setPage}
            page={page}
            total={response.totalPages}
          />
        </div>
      )}
    </div>
  );
};

export default BestBuyers;
